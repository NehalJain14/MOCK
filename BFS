import java.util.*;

public class bfsGraph {
	public static ArrayList<Integer> bfsTraversal(int V, ArrayList<ArrayList<Integer>> adj) {

		Queue<Integer> q = new LinkedList<>();
		boolean vis[] = new boolean[V];
		vis[0] = true;
		q.add(0);
		ArrayList<Integer> ans = new ArrayList<>();
		while (!q.isEmpty()) {
			int node = q.remove();
			ans.add(node);
			for (int i : adj.get(node)) {
				if (vis[i] == false) {
					q.add(i);
					vis[i] = true;
				}

			}

		}
		return ans;
	}

	public static void main(String args[]) {

		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < 5; i++) {
			adj.add(new ArrayList<>());
		}
		adj.get(0).add(1);
		adj.get(1).add(0);
		adj.get(0).add(4);
		adj.get(4).add(0);
		adj.get(1).add(2);
		adj.get(2).add(1);
		adj.get(1).add(3);
		adj.get(3).add(1);

		ArrayList<Integer> ans = bfsTraversal(5, adj);
		int n = ans.size();
		for (int i = 0; i < n; i++) {
			System.out.print(ans.get(i) + " ");
		}
	}
}
